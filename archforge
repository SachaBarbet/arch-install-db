#!/bin/bash
# archforge: Main script of Arch Forge

set -euo pipefail # Stop this script if a command fail, a variable is empty or a pipe isn't fully successfull

# Imports bin
source ./bin/archforge.conf
source ./bin/logging_utils

# Function to check for necessary commands
check_dependencies() {
    local missing=()
    for cmd in "${COMMANDS_DEPENDENCIES[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done
    
    for cmd in "${COMMANDS_DEPENDENCIES[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log_error "$cmd is not installed. Please install it and try again."
            exit 1
        fi
    done
}

# Check disk space required to process with archforge
check_disk_space() {
    local required_space=10240 # 10GB in MB
    local available_space=$(df "$ISO_WORKDIR" | awk 'NR==2 {print $4}')
    if (( available_space < required_space )); then
        log_error "Insufficient disk space. At least 10GB is required."
        exit 1
    fi
}

# Function to prepare the download directory
prepare_downloads_dir() {
    if [[ ! -d "$DOWNLOADS_DIR" ]]; then
        mkdir -p "$DOWNLOADS_DIR"
        log_success "Download directory created: $DOWNLOADS_DIR"
        if [[ $? -ne 0 ]]; then
            log_error "Failed to create directory: $DOWNLOADS_DIR"
            exit 1
        fi
    fi
}

# Function to download Arch Linux ISO
download_iso() {
    if [[ -f "$DOWNLOADS_DIR/archlinux-x86_64.iso" ]]; then
        read -p "ISO file already in '$DOWNLOADS_DIR' directory. Do you want to re-download it ? (Y/n): " choice
        if [[ "$choice" != "Y" ]]; then
            log_info "Using existing ISO file from '$DOWNLOADS_DIR' directory."
            return 0
        fi
    fi

    wget -q -N "$ISO_URL" -O "$DOWNLOADS_DIR/archlinux-x86_64.iso" && log_success "Arch Linux ISO file downloaded to $DOWNLOADS_DIR directory."
    
    if [[ $? -ne 0 ]]; then
        log_error "Failed to download ISO file."
        exit 1
    fi
}

# Function to download Arch Linux signature
download_signature() {
    if [[ -f "$DOWNLOADS_DIR/archlinux-x86_64.iso.sig" ]]; then
        read -p "The signature file is already in '$DOWNLOADS_DIR' directory. Do you want to re-download it ? (Y/n): " choice
        if [[ "$choice" != "Y" ]]; then
            log_info "Using existing signature file from $DOWNLOADS_DIR directory."
            return 0
        fi
    fi

    
    wget -q -N "$ISO_SIG_URL" -O "$DOWNLOADS_DIR/archlinux-x86_64.iso.sig" && log_success "Arch Linux signature file downloaded to $DOWNLOADS_DIR directory."

    if [[ $? -ne 0 ]]; then
        log_error "Failed to download signature file."
        exit 1
    fi
}

# Function to verify the ISO signature
verify_iso() {
    log_info "Verifying ISO signature..."
    gpg --quiet --keyserver-options auto-key-retrieve --verify "$DOWNLOADS_DIR/archlinux-x86_64.iso.sig" "$DOWNLOADS_DIR/archlinux-x86_64.iso" &> /dev/null
    if [[ $? -ne 0 ]]; then
        log_error "ISO signature verification failed."
        exit 1
    fi
    log_success "ISO signature verified successfully using gpg."
}

# Function to list drives and get user selection
select_drive() {
    log_info "Available drives: "
    lsblk -d -o NAME,SIZE,MODEL,TYPE | grep -v loop | while read -r line; do
        log_info "$line"
    done

    while true; do
        read -p "Enter the drive to install Arch Linux (e.g., /dev/sdX): " drive

        # Add "/dev/" prefix if needed
        if [[ "$drive" != /dev/* ]]; then
            drive="/dev/$drive"
        fi

        if [[ -b "$drive" ]]; then
            if [[ "$(lsblk -dno RM "$drive")" != "1" ]]; then
                log_warn "The selected drive is not a removable medium."
            fi

            read -p "Are you sure you want to write to $drive? This will erase all data. (Y/n): " confirm
            if [[ "$confirm" == "Y" ]]; then
                log_success "Drive selected: $drive"
                break
            fi
        else
            log_warn "Invalid drive. Please try again."
        fi
    done
}

# Function to extract the archlinux iso
extract_iso() {
    log_info "Extracting ISO..."
    mkdir -p $ISO_WORKDIR
    mkdir -p $MNT_ARCHISO
    sudo mount -o loop "$DOWNLOADS_DIR/archlinux-x86_64.iso" $MNT_ARCHISO &> /dev/null
    cp -r $MNT_ARCHISO/* $ISO_WORKDIR/
    sudo umount $MNT_ARCHISO
    sudo rm -rf $MNT_ARCHISO
    log_success "ISO extracted."

    if [[ $? -ne 0 ]]; then
        log_error "Failed to extract iso."
        sudo umount $MNT_ARCHISO
        sudo rm -rf $MNT_ARCHISO
        rm -rf $ISO_WORKDIR
        exit 1
    fi
}

# Function to extract, edit the airootfs and build it
edit_airootfs() {
    # Install the to_install folder in airootfs
    log_info "Extract airootfs..."
    sudo unsquashfs -f $ISO_WORKDIR/arch/x86_64/airootfs.sfs &> /dev/null
    log_success "Airootfs extracted."

    log_info "Copying $ADDONS_DIR into extracted iso..."
    cp -r "$ADDONS_DIR"/* squashfs-root/usr/bin
    sudo chroot squashfs-root /bin/bash -c "
        chmod -R +x /usr/bin
        exit
    " &> /dev/null
    log_success "$ADDONS_DIR copied successfully."

    log_info "Rebuild airootfs..."
    sudo rm -rf $ISO_WORKDIR/arch/x86_64/airootfs.sfs
    sudo mksquashfs squashfs-root $ISO_WORKDIR/arch/x86_64/airootfs.sfs -comp xz &> /dev/null
    log_success "Airootfs rebuilt."
    if [[ $? -ne 0 ]]; then
        log_error "Failed to copy $ADDONS_DIR in the drive."
        rm -rf $ISO_WORKDIR
        exit 1
    fi
}

# Function to compile airootfs and rebuild iso
build_iso() {
    log_info "Rebuilding ISO..."
    mkisofs -o $ARCH_ISO \
        -b boot/syslinux/isolinux.bin \
        -c boot/syslinux/boot.cat \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -J -R -V "ARCH_INSTALL_FORGED" $ISO_WORKDIR &> /dev/null

    isohybrid $ARCH_ISO &> /dev/null
    log_success "ISO rebuilt ($ARCH_ISO)."
}

# Function to write ISO to drive
write_iso_to_drive() {
    log_info "Writing ISO to $drive..."
    sudo dd if="$ARCH_ISO" of="$drive" bs=4M status=progress oflag=sync &> /dev/null
    if [[ $? -ne 0 ]]; then
        log_error "Failed to write ISO to drive."
        exit 1
    fi
    log_success "ISO successfully written to $drive."
    sudo rm -rf $ISO_WORKDIR
    sudo rm -rf squashfs-root
}

# Check if the script is being run as root
if [ "$EUID" -ne 0 ]; then
  log_error "This script must be run with privileges. Please use sudo command or a user with root privileges"
  exit 1
fi

check_dependencies

log_info "Arch forge correctly started !"

# Main script execution
prepare_downloads_dir
download_iso
download_signature
verify_iso
select_drive

# If addons folder is empty, we just write iso to drive
if [[ -z "$(ls -A "$ADDONS_DIR")" ]]; then
    read -p "Folder '$ADDONS_DIR' is empty. Do you want to continue ? (Y/n)" choice
    if [[ "$choice" != "Y" ]]; then
        exit 0
    fi
else
    extract_iso
    edit_airootfs
    build_iso
fi

write_iso_to_drive

log_success "Creation of your installation medium completed successfully using arch forge !"
